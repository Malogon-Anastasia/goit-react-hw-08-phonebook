{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","views/ContactsView.js"],"names":["module","exports","ContactList","contacts","useSelector","getVisibleContacts","dispatch","useDispatch","className","s","list","map","id","name","number","item","text","button","type","onClick","contactsOperations","deleteContact","size","ContactForm","useState","setName","setNumber","getContacts","handleChange","e","target","value","reset","contactForm","onSubmit","preventDefault","find","contact","alert","addContact","formWrap","label","input","onChange","pattern","title","required","Filter","getFilter","changeFilter","ContactView","params","isLoadingContacts","contactsSelectors","getLoading","useEffect","fetchContacts","Container","container","content","labelName"],"mappings":"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","file":"static/js/ContactsView.0fe4d609.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3kn07\",\"item\":\"ContactList_item__2CnFc\",\"text\":\"ContactList_text__W9b9g\",\"button\":\"ContactList_button__2vNRk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__lNHYg\",\"formWrap\":\"ContactForm_formWrap__2xcKh\",\"label\":\"ContactForm_label__2ixCY\",\"input\":\"ContactForm_input__2ojBb\",\"button\":\"ContactForm_button__AbmLE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__1Ds1F\",\"input\":\"Filter_input__2zHhF\"};","import PropTypes from 'prop-types';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\r\nimport { contactsOperations } from 'redux/contacts';\r\nimport { MdDelete } from 'react-icons/md';\r\nimport s from './ContactList.module.css';\r\n\r\nexport default function ContactList() {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const deleteContact = id => dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={s.item}>\r\n          <p className={s.text}>{`${name}: ${number}`}</p>\r\n          <button className={s.button} type='button' aria-label='Delete contact' onClick={() => deleteContact(id)}>\r\n            <MdDelete size='30' />\r\n        </button> \r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ),\r\n};\r\n","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getContacts } from 'redux/contacts/contacts-selectors';\r\nimport contactsOperations from 'redux/contacts/contacts-operations';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (contacts.find(contact => contact.name === name)) {\r\n      return alert(`${name} is already in contacts`) || reset();\r\n    } else if (contacts.find(contact => contact.number === number)) {\r\n      return alert(`${number} is already in contacts`) || reset();\r\n    }\r\n    \r\n    dispatch(contactsOperations.addContact({ name, number }));\r\n    reset();\r\n\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n  \r\n\r\n  return (\r\n    <form className={s.contactForm}\r\n      onSubmit={handleSubmit}\r\n    >\r\n        <div className={s.formWrap}>\r\n          <label className={s.label}>\r\n            Name{' '}\r\n            <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label className={s.label}>\r\n            Number{' '}\r\n            <input\r\n              className={s.input}\r\n              type=\"tel\"\r\n              value={number}\r\n              onChange={handleChange}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n\r\n          <button className={s.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n  contacts: PropTypes.array,\r\n};\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getFilter } from 'redux/contacts/contacts-selectors';\r\nimport { changeFilter } from 'redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <label className={s.label}>\r\n      Find contacts by name\r\n      <input className={s.input} type=\"text\" value={value}\r\n        onChange={ e => dispatch(changeFilter(e.target.value)) } />\r\n    </label>\r\n  );\r\n};\r\n\r\n\r\nexport default Filter;","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Container from '../components/Container';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport ContactForm from '../components/ContactForm';\r\nimport Filter from '../components/Filter';\r\nimport { contactsOperations, contactsSelectors } from '../redux/contacts';\r\nimport s from './Views.module.css';\r\n\r\nexport default function ContactView(params) {\r\n  const dispatch = useDispatch();\r\n  const isLoadingContacts  = useSelector(contactsSelectors.getLoading);\r\n\r\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <main>\r\n      <Container>\r\n        <div className={s.container}>\r\n          <ContactForm />\r\n          <div className={s.content}>\r\n            <Filter labelName='Find contacts by name' />\r\n            {isLoadingContacts  && <h1>Loading...</h1>}\r\n            <ContactList />\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </main>\r\n  );\r\n}"],"sourceRoot":""}